---
interface Props {
    repoUrl: string;
}

const { repoUrl } = Astro.props;
---

<header class="mx-auto mb-6 flex max-w-7xl items-center justify-between md:mx-auto md:max-w-3xl md:px-0">
    <a
        href={repoUrl}
        target="_blank"
        rel="noopener noreferrer"
        class="github-header flex items-center gap-2 rounded-md bg-primary px-3 py-2 text-background hover:bg-primary-hover hover:text-background dark:hover:bg-primary-dark-hover dark:hover:text-background-dark"
        data-repo-url={repoUrl}
    >
        <svg
            class="h-5 w-5"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
        >
            <path
                d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"
            ></path>
        </svg>

        View on GitHub

        <div id="star-count" class="ml-2 flex hidden items-center gap-1 pl-2">
            <svg class="text-yellow-500 h-4 w-4" viewBox="0 0 24 24" fill="currentColor">
                <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"
                ></path>
            </svg>

            <span></span>
        </div>
    </a>
</header>

<script>
    import { createLogger, type ILogger } from '../utils/logger';
    import { safeExecute } from '../utils/safe-execute';

    const logger: ILogger = createLogger({ prefix: 'GitHubHeader' });

    /** Interface for the repository details. */
    interface IRepoDetails {
        username: string; // the username of the repository owner.
        repo: string; // the name of the repository.
    }

    /**
     * Parses the GitHub URL and returns the username and repo.
     *
     * @param url - The GitHub URL to parse.
     * @returns The parsed username and repo, or null if parsing fails.
     */
    const getRepoDetails = (url: string): IRepoDetails | null => {
        try {
            const urlObj = new URL(url);
            const parts: string[] = urlObj.pathname.split('/').filter(Boolean);

            if (parts.length >= 2) {
                const [username, repo] = parts;

                if (username != null && repo != null) {
                    logger.info(`Parsed GitHub repo details: username=${username}, repo=${repo}`);

                    return { username, repo };
                }

                logger.error('Invalid GitHub repo URL: username or repo is undefined');

                return null;
            }
        } catch (e) {
            logger.error('Failed to parse GitHub URL:', e);

            return null;
        }

        logger.error('Failed to parse GitHub URL');

        return null;
    };

    /**
     * Generates a mock star count for development purposes.
     *
     * @returns A random number between 50 and 500.
     */
    const getMockStarCount = (): number => Math.floor(Math.random() * (500 - 50 + 1)) + 50;

    /**
     * Updates the star count for a given GitHub repository.
     *
     * @param repoUrl - The URL of the GitHub repository.
     */
    const updateStarCount = async (repoUrl: string) => {
        const repoDetails = getRepoDetails(repoUrl);
        const starCountElement = document.getElementById('star-count');

        if (!starCountElement) {
            logger.error('Star count element not found');

            return;
        }

        if (repoDetails) {
            try {
                let starCount: number;

                if (import.meta.env.DEV) {
                    // Use mock data in development.
                    starCount = getMockStarCount();
                    logger.info(`Using mock star count: ${starCount}`);
                } else {
                    // Real API call in production.
                    const response = await fetch(
                        `https://api.github.com/repos/${repoDetails.username}/${repoDetails.repo}`,
                        {
                            headers: {
                                Accept: 'application/vnd.github.v3+json',
                                ...(import.meta.env['GITHUB_TOKEN'] && {
                                    Authorization: `token ${import.meta.env['GITHUB_TOKEN']}`
                                })
                            }
                        }
                    );

                    if (!response.ok) {
                        throw new Error(await response.text());
                    }

                    const data = await response.json();
                    starCount = data.stargazers_count;
                }

                logger.info(`Successfully updated star count: ${starCount}`);

                starCountElement.querySelector('span')!.textContent = starCount.toString();
                starCountElement.classList.remove('hidden');
            } catch (error) {
                logger.error('Error fetching GitHub data:', error);
            }
        }
    };

    // Initialize star count for each GitHub header.
    safeExecute(
        () => {
            document.querySelectorAll('[data-repo-url]').forEach((element) => {
                const repoUrl = element.getAttribute('data-repo-url');

                if (repoUrl) {
                    updateStarCount(repoUrl);
                }
            });

            // Update star count periodically (every three minutes).
            const intervalId = setInterval(
                () =>
                    document.querySelectorAll('[data-repo-url]').forEach((element) => {
                        const repoUrl = element.getAttribute('data-repo-url');
                        if (repoUrl) {
                            updateStarCount(repoUrl);
                        }
                    }),
                3 * 60 * 1000
            );

            // Cleanup interval on page navigation.
            document.addEventListener('astro:before-preparation', () => clearInterval(intervalId));
        },
        undefined,
        'Failed to setup GitHub star count'
    );
</script>
