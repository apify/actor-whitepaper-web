<script>
    import { createLogger } from '../utils/logger';
    import type { HeadingEntry, ILogger } from '../types';
    import { headingStore } from '../stores/heading';
    import { HEADING_LINKS } from '../config/components';
    import { smoothScrollTo } from '../utils/scroll';

    const logger: ILogger = createLogger({ prefix: 'HeadingLinks' });

    interface ValidHeading extends HeadingEntry {
        id: string;
        text: string;
        depth: number;
    }

    /** Manager for heading links in MDX content. Handles heading ID generation, anchor creation, and table of contents management. */
    class HeadingLinksManager {
        /** Selector for finding headings in MDX content */
        private static readonly HEADING_SELECTOR = HEADING_LINKS.SELECTOR;

        /** Regex for converting text to URL-friendly format */
        private static readonly ID_REGEX = HEADING_LINKS.ID_REGEX;

        /** Regex for trimming hyphens from start and end */
        private static readonly TRIM_REGEX = HEADING_LINKS.TRIM_REGEX;

        /** Map to track used IDs and their counts for duplicate prevention */
        private usedIds: Map<string, number>;

        /** Constructor for the HeadingLinksManager class. Initializes the usedIds map. */
        constructor() {
            this.usedIds = new Map<string, number>();
        }

        /**
         * Generate a heading ID.
         *
         * @param text - Text to generate an ID from
         * @returns Heading ID
         */
        private generateHeadingId(text: string | null): string {
            let o = '';

            if (text) {
                const baseId = text.toLowerCase().replace(HeadingLinksManager.ID_REGEX, '-').replace(HeadingLinksManager.TRIM_REGEX, '');

                if (baseId.length === 0) {
                    logger.warn(`Generated heading ID is empty for text: "${text}"`);
                    o = '';
                } else {
                    // logger.info(`Base ID generated: ${baseId}`);

                    if (this.usedIds.has(baseId)) {
                        const count = this.usedIds.get(baseId)! + 1;
                        this.usedIds.set(baseId, count);
                        o = `${baseId}-${count}`;

                        // logger.info(`Duplicate ID handled: ${o}`);
                    } else {
                        this.usedIds.set(baseId, 1);
                        o = baseId;

                        // logger.info(`New ID generated: ${baseId}`);
                    }
                }
            } else {
                logger.warn('Empty text provided for heading ID generation');
            }

            return o;
        }

        /**
         * Create an anchor element.
         *
         * @param id - ID to link to
         * @returns Anchor element
         */
        private createAnchorElement(id: string): HTMLAnchorElement {
            const anchor: HTMLAnchorElement = document.createElement('a');

            anchor.className = 'anchor absolute left-1 px-2 rounded-full border-none hover:bg-primary dark:hover:bg-primary-dark font-source text-[10pt] hover:text-background dark:hover:text-background-dark select-none';
            anchor.href = `#${id}`;
            anchor.innerHTML = '#';
            anchor.setAttribute('aria-hidden', 'true');

            // logger.info(`Anchor element created for ID: ${id}`);

            return anchor;
        }

        /**
         * Handle an anchor click.
         *
         * @param e - Mouse event
         * @param id - ID to link to
         */
        private handleAnchorClick = (e: MouseEvent, id: string): void => {
            e.preventDefault();

            const url = new URL(window.location.href);
            url.hash = id;

            smoothScrollTo({ targetId: id });

            try {
                window.history.pushState({}, '', url.toString());
            } catch (error) {
                logger.error('Failed to update browser history', error);
            }

            navigator.clipboard.writeText(url.toString()).catch((error) => {
                logger.error('Failed to copy URL to clipboard', error);
            });
        };

        /** Add heading links to all headings. */
        public addHeadingLinks(): void {
            if (document.querySelector(HeadingLinksManager.HEADING_SELECTOR)) {
                this.usedIds = new Map<string, number>();
                const headings: NodeListOf<HTMLHeadingElement> = document.querySelectorAll(HeadingLinksManager.HEADING_SELECTOR);

                headings.forEach((headingElement) => {
                    const id = this.generateHeadingId(headingElement.textContent);

                    if (id) {
                        const anchor = this.createAnchorElement(id);
                        anchor.addEventListener('click', (e) => this.handleAnchorClick(e, id));
                        headingElement.insertAdjacentElement('afterbegin', anchor);
                        headingElement.id = id;
                    }
                });
            } else {
                logger.warn('No headings found in document to process');
            }
        }

        /**
         * Collect headings from the page.
         *
         * @returns Array of headings.
         */
        public collectHeadings(): HeadingEntry[] {
            let headings: HeadingEntry[] = [];
            const headingElements = document.querySelectorAll(HeadingLinksManager.HEADING_SELECTOR);

            if (headingElements.length > 0) {
                this.usedIds = new Map<string, number>();

                headingElements.forEach((heading) => {
                    const text = heading.textContent;
                    const id = this.generateHeadingId(text);
                    const depth = parseInt(heading.tagName.charAt(1));

                    if (id && text) {
                        // Remove the # prefix, since that's the heading activation hyperlink.
                        headings.push({ id, text: text.replace(/^#/, ''), depth });
                    } else {
                        logger.error(`Heading link text not found: ${heading.textContent}`);
                    }
                });
            } else {
                logger.warn('No headings found to collect');
            }

            return headings;
        }

        /** Refresh the heading links. */
        public refresh = (): void => {
            logger.info('Refreshing heading links');

            try {
                this.addHeadingLinks();
                const headings = this.collectHeadings();
                const validHeadings: ValidHeading[] = headings.filter((h): h is ValidHeading => Boolean(h.id && h.text));

                if (validHeadings.length === 0) {
                    logger.warn('No headings found in content');
                } else {
                    logger.info(`Found ${validHeadings.length} valid headings`);
                }

                headingStore.set(validHeadings);
            } catch (error) {
                logger.error('Failed to refresh heading links', error);
            }
        };
    }

    try {
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => {
                const manager = new HeadingLinksManager();
                manager.refresh();

                document.addEventListener('astro:page-load', () => {
                    manager.refresh();
                });
            });
        } else {
            const manager = new HeadingLinksManager();
            manager.refresh();

            document.addEventListener('astro:page-load', () => {
                manager.refresh();
            });
        }
    } catch (error) {
        logger.error('Failed to initialize heading links manager', error);
    }
</script>
