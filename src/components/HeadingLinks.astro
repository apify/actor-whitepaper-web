<script>
    import { tocHeadlineStore } from '../stores/toc-headline';
    import type { TocHeadline } from '../types';

    /**
     * Manager for heading links in MDX content.
     * Handles heading ID generation, anchor creation, and table of contents management.
     */
    class HeadingLinksManager {
        /** Selector for finding headings in MDX content */
        private static readonly HEADING_SELECTOR = '.mdx-content h1, .mdx-content h2, .mdx-content h3, .mdx-content h4';

        /** Regex for converting text to URL-friendly format */
        private static readonly ID_REGEX = /[^a-z0-9]+/g;

        /** Regex for trimming hyphens from start and end */
        private static readonly TRIM_REGEX = /(^-|-$)/g;

        /** Map to track used IDs and their counts for duplicate prevention */
        private usedIds: Map<string, number> = new Map();

        /**
         * Smoothly scroll to the target element.
         * @param targetId - ID of the target element to scroll to
         */
        private smoothScrollTo(targetId: string): void {
            const targetElement = document.getElementById(targetId);

            if (targetElement) {
                window.scrollTo({
                    top: targetElement.offsetTop,
                    behavior: 'smooth'
                });
            } else {
                console.error(`[heading-links] Heading link target not found: ${targetId}`);
            }
        }

        /**
         * Generate a heading ID.
         * @param text - Text to generate an ID from
         * @returns Heading ID
         */
        private generateHeadingId(text: string | null): string | null {
            if (!text) return null;

            // Generate the base ID.
            const baseId = text.toLowerCase().replace(HeadingLinksManager.ID_REGEX, '-').replace(HeadingLinksManager.TRIM_REGEX, '');

            // If this is the first occurrence, use the base ID.
            if (!this.usedIds.has(baseId)) {
                this.usedIds.set(baseId, 1);
                return baseId;
            }

            // For subsequent occurrences, append a number.
            const count = this.usedIds.get(baseId)! + 1;
            this.usedIds.set(baseId, count);

            return `${baseId}-${count}`;
        }

        /**
         * Create an anchor element.
         * @param id - ID to link to
         * @returns Anchor element
         */
        private createAnchorElement(id: string): HTMLAnchorElement {
            const anchor = document.createElement('a');

            anchor.className = 'anchor absolute left-1 px-2 rounded-full border-none hover:bg-link dark:hover:bg-link-dark font-source text-[10pt] hover:text-bg dark:hover:text-bg-dark';
            anchor.href = `#${id}`;
            anchor.innerHTML = '#';
            anchor.setAttribute('aria-hidden', 'true');

            return anchor;
        }

        /**
         * Handle an anchor click.
         * @param e - Mouse event
         * @param id - ID to link to
         */
        private handleAnchorClick(e: MouseEvent, id: string): void {
            e.preventDefault();

            // Construct the URL with the heading ID.
            const url = `${window.location.origin}${window.location.pathname}#${id}`;

            // Scroll to the heading and update the URL.
            this.smoothScrollTo(id);
            window.history.pushState({}, '', url);

            // Copy the URL to the clipboard.
            navigator.clipboard.writeText(url).catch((error) => {
                console.error('[heading-links] Failed to copy URL:', error);
            });
        }

        /**
         * Add heading links to all headings.
         */
        public addHeadingLinks(): void {
            // Reset the used IDs map for each new page.
            this.usedIds = new Map();

            // Collect headings from the page.
            const headings = document.querySelectorAll<HTMLHeadingElement>(HeadingLinksManager.HEADING_SELECTOR);

            // Add heading links to each heading.
            headings.forEach((heading) => {
                const id = this.generateHeadingId(heading.textContent);

                if (!id) return; // skip headings without text

                const anchor = this.createAnchorElement(id);
                anchor.addEventListener('click', (e) => this.handleAnchorClick(e, id));

                heading.insertAdjacentElement('afterbegin', anchor);
                heading.id = id;
            });
        }

        /**
         * Collect headings from the page.
         * @returns Array of headings
         */
        public collectHeadings(): TocHeadline[] {
            const headings: TocHeadline[] = [];
            const headingElements = document.querySelectorAll(HeadingLinksManager.HEADING_SELECTOR);

            this.usedIds = new Map();

            // Collect headings from the page.
            headingElements.forEach((heading) => {
                const text = heading.textContent;
                const id = this.generateHeadingId(text);
                const depth = parseInt(heading.tagName.charAt(1));

                if (id && text) {
                    // Remove the # prefix, since that's the headline activation hyperlink.
                    headings.push({ id, text: text!.replace(/^#/, ''), depth });
                } else {
                    console.error(`[heading-links] Heading link text not found: ${heading.textContent}`);
                }
            });

            return headings;
        }

        /**
         * Refresh the heading links.
         */
        public refresh = (): void => {
            console.log('[heading-links] Refreshing heading links');

            // Add heading links to the page.
            this.addHeadingLinks();

            // Collect headings from the page.
            const headings = this.collectHeadings();

            // Filter out headings without an ID or text.
            const validHeadings = headings.filter((h) => h.id && h.text) as Array<{
                id: string;
                text: string;
                depth: number;
            }>;

            console.log(`[heading-links] Found ${validHeadings.length} valid headings`);

            tocHeadlineStore.set(validHeadings);
        };
    }

    // Initialize heading manager and set up page load refresh
    const manager = new HeadingLinksManager();
    manager.refresh();
    document.addEventListener('astro:page-load', () => manager.refresh());
</script>
