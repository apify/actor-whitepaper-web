---
interface Props {
    description: string;
    spline: string;
    position?: 'left' | 'right' | 'content' | 'full';
}

const { description, spline, position = 'content' } = Astro.props;

// Calculate width and alignment classes based on position
const containerClasses = {
    left: 'spline float-left w-1/3 mr-8 mb-4',
    right: 'spline float-right w-1/3 ml-8 mb-4',
    content: 'spline w-full mb-8',
    wide: 'spline relative left-[50%] right-[50%] -mx-[100vw] ml-[-50vw] mr-[-50vw] w-screen max-w-[100vw] mb-8'
};

const iframeClasses = {
    left: 'aspect-square w-full rounded-md border border-code-stroke bg-code-bg dark:border-code-stroke-dark dark:bg-code-bg-dark',
    right: 'aspect-square w-full rounded-md border border-code-stroke bg-code-bg dark:border-code-stroke-dark dark:bg-code-bg-dark',
    content: 'aspect-video w-full rounded-md border border-code-stroke bg-code-bg dark:border-code-stroke-dark dark:bg-code-bg-dark',
    wide: 'aspect-[21/9] w-full border border-code-stroke bg-code-bg dark:border-code-stroke-dark dark:bg-code-bg-dark'
};
---

<figure class={containerClasses[position === 'full' ? 'wide' : position]}>
    <iframe src={`https://my.spline.design/${spline}/`} class={iframeClasses[position === 'full' ? 'wide' : position]} frameborder="0"></iframe>

    <figcaption class="text-text-muted dark:text-text-muted-dark mt-3 text-balance text-center text-sm">
        {description}
    </figcaption>
</figure>

<style>
    /* Clear floats after the figure if using left/right positioning */
    figure:after {
        display: table;
        clear: both;
        content: '';
    }
</style>
