---
import { Image } from 'astro:assets';
import placeholder from './placeholder.png';

interface Props {
    description: string;
    spline: string;
    position?: 'left' | 'right' | 'content';
}

const { description, spline, position = 'content' } = Astro.props;

// Calculate width and alignment classes based on position.
const containerClasses = {
    left: 'spline float-left w-1/3 mr-8 mb-4 select-none',
    right: 'spline float-right w-1/3 ml-8 mb-4 select-none',
    content: 'spline w-full mb-8 select-none',
    default: 'spline w-full mb-8 select-none'
};

// Calculate width and alignment classes based on position.
const iframeClasses = {
    left: 'aspect-square w-full rounded-md border border-code-stroke bg-code-bg dark:border-code-stroke-dark dark:bg-code-bg-dark',
    right: 'aspect-square w-full rounded-md border border-code-stroke bg-code-bg dark:border-code-stroke-dark dark:bg-code-bg-dark',
    content: 'aspect-video w-full rounded-md border border-code-stroke bg-code-bg dark:border-code-stroke-dark dark:bg-code-bg-dark',
    default: 'aspect-video w-full rounded-md border border-code-stroke bg-code-bg dark:border-code-stroke-dark dark:bg-code-bg-dark'
};

const containerClass = containerClasses[position as keyof typeof containerClasses] || containerClasses.default;
const iframeClass = iframeClasses[position as keyof typeof iframeClasses] || iframeClasses.default;
---

<figure class={containerClass}>
    {position === 'content' ? <iframe src={`https://my.spline.design/${spline}/`} class={iframeClass} title={description} /> : <Image src={placeholder} alt={description} class={iframeClass} />}

    <figcaption class="mt-3 text-balance text-center text-sm text-text-muted dark:text-text-muted-dark">
        {description}
    </figcaption>
</figure>

<style>
    /* Clear floats after the figure if using left/right positioning. */
    figure:after {
        display: table;
        clear: both;
        content: '';
    }
</style>
