---
import { Image } from 'astro:assets';
import placeholder from './placeholder.png';

interface Props {
    description: string;
    spline: string;
    position?: 'left' | 'right' | 'content';
}

const { description, spline, position = 'content' } = Astro.props;

const containerClasses = {
    left: 'spline float-left w-1/3 mr-8 mb-4 select-none',
    right: 'spline float-right w-1/3 ml-8 mb-4 select-none',
    content: 'spline w-full mb-8 select-none',
    default: 'spline w-full mb-8 select-none'
};

const canvasClasses = {
    left: 'aspect-square w-full rounded-md border border-code-stroke bg-code-bg dark:border-code-stroke-dark dark:bg-code-bg-dark',
    right: 'aspect-square w-full rounded-md border border-code-stroke bg-code-bg dark:border-code-stroke-dark dark:bg-code-bg-dark',
    content: 'aspect-video w-full rounded-md border border-code-stroke bg-code-bg dark:border-code-stroke-dark dark:bg-code-bg-dark',
    default: 'aspect-video w-full rounded-md border border-code-stroke bg-code-bg dark:border-code-stroke-dark dark:bg-code-bg-dark'
};

const containerClass = containerClasses[position as keyof typeof containerClasses] || containerClasses.default;
const canvasClass = canvasClasses[position as keyof typeof canvasClasses] || canvasClasses.default;
---

<figure class={containerClass}>
    <canvas class={canvasClass} data-spline={spline}></canvas>

    <figcaption class="mt-3 text-balance text-center text-sm text-text-muted dark:text-text-muted-dark">
        {description}
    </figcaption>
</figure>

<script>
    import * as THREE from 'three';
    import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';
    import SplineLoader from '@splinetool/loader';

    // Initialize all canvases with Spline scenes
    document.querySelectorAll('canvas[data-spline]').forEach((canvasElement) => {
        const splineFile = canvasElement.getAttribute('data-spline');
        if (!splineFile) return;

        const camera = new THREE.PerspectiveCamera(33.7, canvasElement.clientWidth / canvasElement.clientHeight, 70, 100000);
        camera.position.set(659.12, 3308.88, 4998.09);
        camera.quaternion.setFromEuler(new THREE.Euler(-0.75, 0, 0));

        const scene = new THREE.Scene();

        const loader = new SplineLoader();
        loader.load(`/assets/${splineFile}`, (splineScene) => {
            scene.add(splineScene);
        });

        const renderer = new THREE.WebGLRenderer({
            canvas: canvasElement,
            antialias: true
        });

        renderer.setSize(canvasElement.clientWidth, canvasElement.clientHeight);
        camera.aspect = canvasElement.clientWidth / canvasElement.clientHeight;
        camera.updateProjectionMatrix();

        renderer.setAnimationLoop(animate);
        renderer.shadowMap.enabled = true;
        renderer.shadowMap.type = THREE.PCFShadowMap;

        scene.background = new THREE.Color('#e0e7ed');
        renderer.setClearAlpha(1);

        scene.fog = new THREE.Fog('#e0e7ed', 2000, 20000);

        const controls = new OrbitControls(camera, renderer.domElement);
        controls.enableDamping = true;
        controls.dampingFactor = 0.125;

        function onResize() {
            camera.aspect = canvasElement.clientWidth / canvasElement.clientHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(canvasElement.clientWidth, canvasElement.clientHeight, false);
        }

        const resizeObserver = new ResizeObserver(onResize);
        resizeObserver.observe(canvasElement);

        function animate(time) {
            controls.update();
            renderer.render(scene, camera);
        }
    });
</script>

<style>
    /* Clear floats after the figure if using left/right positioning */
    figure:after {
        display: table;
        clear: both;
        content: '';
    }
</style>
