<nav class="fixed right-0 top-0 h-screen w-64 overflow-y-auto bg-toc-bg shadow-xl dark:bg-toc-bg-dark [&.is-docked]:-right-[214px] [&.is-docked]:bg-toc-bg-docked [&.is-docked]:shadow-none dark:[&.is-docked]:bg-toc-bg-docked-dark" id="toc-nav" aria-label="Table of Contents">
    <div class="sticky left-0 top-0 flex items-center justify-between bg-toc-bg p-4 dark:bg-toc-bg-dark">
        <button id="dock-button" aria-label="Toggle Table of Contents">&rarr;</button>
        <input type="text" id="toc-filter" placeholder="Filter..." aria-label="Filter TOC" class="rounded-md px-2 py-1 text-toc-item" />
    </div>

    <ul id="toc-list" class="mb-8 text-toc-item"></ul>
</nav>

<script>
    import { headingStore } from '../stores/heading';

    // State management.
    let isDocked = false;
    let activeId = '';

    // DOM element references.
    const nav = document.getElementById('toc-nav');
    const filterInput = document.getElementById('toc-filter');
    const dockButton = document.getElementById('dock-button');
    const tocList = document.getElementById('toc-list');

    // Subscribe to changes in the headings store.
    // This ensures TOC updates when headings change.
    headingStore.subscribe((headings: string | any[]) => {
        if (headings.length > 0) {
            console.log(`[toc] ${headings.length} headings found, rendering TOC`);
            renderTOC();
        } else {
            console.error('[toc] No headings found');
        }
    });

    // Intersection Observer: Tracks which headings are visible in viewport.
    // rootMargin creates a detection zone in top 20% of viewport.
    const observer = new IntersectionObserver(
        (entries) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    updateActiveHeading(entry.target.id);
                }
            });
        },
        { rootMargin: '0px 0px -80% 0px' }
    );

    // Initialize TOC by observing all heading elements.
    function setupTOC() {
        headingStore.get().forEach((heading: { id: string }) => {
            const element = document.getElementById(heading.id);
            if (element) observer.observe(element);
        });
    }

    // Setup TOC on initial load and after page transitions.
    setupTOC();
    document.addEventListener('astro:page-load', setupTOC);
    document.dispatchEvent(new CustomEvent('tocReady'));

    // Toggle TOC docking state.
    dockButton?.addEventListener('click', () => {
        isDocked = !isDocked;
        nav?.classList.toggle('is-docked');
        dockButton.innerHTML = isDocked ? '&larr;' : '&rarr;';
    });

    // Filter TOC entries based on search input.
    filterInput?.addEventListener('input', (event) => {
        const filter = (event.target as HTMLInputElement).value.toLowerCase();
        renderTOC(filter);
    });

    // Update visual state of TOC when active heading changes.
    function updateActiveHeading(id: string) {
        activeId = id;

        document.querySelectorAll('.toc-item').forEach((item) => {
            const isActive = item.querySelector(`a[href="#${id}"]`) !== null;

            item.classList.toggle('is-active', isActive);

            // If this item became active, ensure it's visible in the TOC.
            if (isActive && nav && tocList) {
                const tocRect = tocList.getBoundingClientRect();
                const itemRect = item.getBoundingClientRect();
                const visibleBottom = Math.min(tocRect.bottom, window.innerHeight);
                const isAbove = itemRect.top < 0;
                const isBelow = itemRect.bottom > visibleBottom;

                if (isAbove || isBelow) {
                    item.scrollIntoView({
                        behavior: 'smooth',
                        block: 'center'
                    });
                }
            }
        });
    }

    // Render TOC list with optional filtering.
    function renderTOC(filter = '') {
        if (tocList) {
            tocList.innerHTML = headingStore
                .get()
                .filter((heading: { text: string }) => heading.text.toLowerCase().includes(filter))
                .map(
                    (heading: { depth: any; id: string; text: any }) => `
                        <li class="toc-item  ${heading.id === activeId ? 'is-active' : ''}">
                            <a class="text-balance block text-toc-text dark:text-toc-text-dark py-toc-y px-toc-item-x pl-toc-d${heading.depth - 1}" href="#${heading.id}">
                                ${heading.text}
                            </a>
                        </li>`
                )
                .join('');
        }
    }
</script>

<style is:global>
    #toc-list > li.is-active {
        @apply bg-toc-active-bg shadow-sm dark:bg-toc-active-bg-dark;

        & a {
            @apply text-toc-active-text dark:text-toc-active-text-dark;
        }
    }
</style>
