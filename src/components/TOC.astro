<div
    class="pointer-events-none fixed right-0 top-0 h-full w-16 mix-blend-exclusion min-[1140px]:pr-4 min-[1600px]:hidden"
    id="toc-progress"
>
    <div id="toc-progress-bars" class="relative h-full"></div>
</div>

<nav
    class="toc-nav pointer-events-none fixed right-0 top-[10%] h-[80%] w-80 overflow-y-auto rounded-l-xl bg-background-toc opacity-0 shadow-xl min-[1140px]:right-4 min-[1140px]:rounded-xl dark:bg-background-toc-dark"
    id="toc-nav"
    aria-label="Table of Contents"
>
    <div
        class="toc-filter sticky left-0 top-0 flex items-center justify-between bg-background-toc-toolbar p-6 dark:bg-background-toc-toolbar-dark"
    >
        <input
            type="text"
            id="toc-filter"
            placeholder="Filter..."
            aria-label="Filter TOC"
            class="w-full rounded-md bg-background-toc-filter px-2 py-1 text-toc-item shadow-sm dark:bg-background-toc-filter-dark"
        />
    </div>

    <ul id="toc-list" class="mb-4 text-toc-item" role="list"></ul>
</nav>

<style is:global>
    .toc-nav {
        &.toc-nav.is-wide-screen {
            @apply pointer-events-auto right-0 top-0 h-full rounded-none bg-transparent opacity-100 shadow-none;

            & .toc-filter {
                @apply bg-transparent;
            }
        }
    }

    .toc-item {
        @apply px-6;

        & a {
            @apply block text-balance px-1 py-1 text-text-toc hover:text-primary-hover dark:text-text-toc-dark dark:hover:text-primary-dark-hover;

            &.toc-depth-1 {
                @apply pl-0;
            }

            &.toc-depth-2 {
                @apply pl-[16px];
            }

            &.toc-depth-3 {
                @apply pl-[32px];
            }

            &.toc-depth-4 {
                @apply pl-[48px];
            }
        }

        &.is-active {
            @apply bg-background-toc-active shadow-sm dark:bg-background-toc-active-dark;

            & a {
                @apply text-text-toc-active dark:text-text-toc-active-dark;
            }
        }
    }
</style>

<script>
    import { createLogger, type ILogger } from '../utils/logger';
    import { debounce } from '../utils/debounce';
    import { safeExecute } from '../utils/safe-execute';
    import { TOC } from '../config/components';
    import { headingStore } from '../stores/heading';
    import { safeQuerySelector } from '../utils/dom';
    import { smoothScrollTo } from '../utils/scroll';
    import type { IHeadingEntry, IProgressBarStyles, ITOCEntry } from '../types/toc';

    const logger: ILogger = createLogger({ prefix: 'TOC' });

    interface TOCState {
        isVisible: boolean;
        isScrolling: boolean;
        lastScrollPosition: number;
    }

    interface TOCElements {
        nav: HTMLElement | null;
        filterInput: HTMLElement | null;
        tocList: HTMLElement | null;
        progressBars: HTMLElement | null;
    }

    /** Manages the TOC including displaying, updating, and scrolling to headings. */
    class TOCManager {
        private activeId: string = '';

        /** State of the TOC manager. */
        private readonly state: TOCState = {
            isVisible: false,
            isScrolling: false,
            lastScrollPosition: 0
        };

        /** Elements of the TOC. */
        private readonly elements: TOCElements = {
            nav: document.getElementById('toc-nav'),
            filterInput: document.getElementById('toc-filter'),
            tocList: document.getElementById('toc-list'),
            progressBars: document.getElementById('toc-progress-bars')
        };

        /** Intersection observer for tracking heading visibility. */
        private readonly observer: IntersectionObserver;

        /** Interval ID for rendering progress bars. */
        private readonly intervalId: number;

        /**
         * Initializes an IntersectionObserver, sets up debounced rendering of progress bars, and initiates periodic
         * scroll checks.
         */
        constructor() {
            this.cleanup = this.cleanup.bind(this);
            this.getProgressBarStyles = this.getProgressBarStyles.bind(this);
            this.initialize = this.initialize.bind(this);
            this.intersection = this.intersection.bind(this);
            this.linkClick = this.linkClick.bind(this);
            this.mouseMoveRefresh = this.mouseMoveRefresh.bind(this);
            this.renderProgressBars = this.renderProgressBars.bind(this);
            this.renderTOC = this.renderTOC.bind(this);
            this.scrollActiveItemIntoView = this.scrollActiveItemIntoView.bind(this);
            this.scrollRefresh = this.scrollRefresh.bind(this);
            this.setupEventListeners = this.setupEventListeners.bind(this);
            this.updateActiveHeading = this.updateActiveHeading.bind(this);
            this.updateAriaLabels = this.updateAriaLabels.bind(this);
            this.updateProgressVisibility = this.updateProgressVisibility.bind(this);
            this.updateTOCMode = this.updateTOCMode.bind(this);
            this.updateTOCPosition = this.updateTOCPosition.bind(this);

            this.observer = new IntersectionObserver((entries) => this.intersection(entries), {
                rootMargin: TOC.OBSERVER_MARGIN
            });

            this.setupEventListeners();

            this.intervalId = window.setInterval(this.scrollRefresh, TOC.SCROLL_CHECK_INTERVAL);
        }

        /**
         * Handles the intersection events for observed elements.
         *
         * @param {IntersectionObserverEntry[]} entries - An array of intersection observer entries.
         */
        private intersection(entries: IntersectionObserverEntry[]): void {
            if (entries.length) {
                entries.forEach((entry) => {
                    if (entry.isIntersecting) {
                        if (entry.target.id) {
                            this.updateActiveHeading(entry.target.id);
                        } else {
                            logger.warn('Intersecting heading element has no ID');
                        }
                    }
                });
            } else {
                logger.warn('Received empty intersection entries');
            }
        }

        /** Sets up various event listeners required for TOC functionality. */
        private setupEventListeners(): void {
            headingStore.subscribe((value: readonly IHeadingEntry[]) => {
                if (value.length > 0) {
                    logger.info(`${value.length} headings found, rendering TOC`);
                    this.renderTOC();
                } else {
                    logger.warn('No headings found');
                }
            });

            this.elements.filterInput?.addEventListener('input', (event) => {
                const filter = (event.target as HTMLInputElement).value.toLowerCase();
                this.renderTOC(filter);
            });

            window.addEventListener('scroll', this.scrollRefresh, { passive: true });
            window.addEventListener('mousemove', this.mouseMoveRefresh, { passive: true });

            this.elements.tocList?.addEventListener('click', this.linkClick);

            window.addEventListener(
                'resize',
                debounce(() => {
                    this.updateTOCMode();
                    this.updateProgressVisibility();
                    this.renderProgressBars();
                }, 100)
            );
        }

        /**
         * Updates the TOC mode based on the current window width. Toggles the 'is-wide-screen' class on the navigation
         * element if the window width is greater than or equal to the predefined WIDE_SCREEN_WIDTH.
         */
        private updateTOCMode(): void {
            if (this.elements.nav) {
                this.elements.nav.classList.toggle('is-wide-screen', window.innerWidth >= TOC.WIDE_SCREEN_WIDTH);
            }
        }

        /**
         * Updates the vertical position of the TOC navigation element based on scroll position and hero section height.
         * Only applies when the window width is greater than or equal to the wide screen threshold. The TOC will "dock"
         * to the hero section while scrolling through it, then stick to the top of the viewport once scrolled past.
         * This creates a smooth transition effect as the user scrolls down the page.
         */
        private updateTOCPosition(): void {
            if (this.elements.nav) {
                if (window.innerWidth >= TOC.WIDE_SCREEN_WIDTH) {
                    const heroElement = document.getElementById('hero');

                    if (heroElement != null) {
                        const heroHeight = heroElement ? heroElement.offsetHeight : 0;
                        const scrollPosition = document.documentElement.scrollTop;
                        const isDocking = heroHeight - scrollPosition > 0;
                        const offset = heroHeight - scrollPosition;

                        this.elements.nav.style.top = isDocking ? `${offset}px` : `0`;
                    }
                } else {
                    this.elements.nav.style.top = `10%`;
                }
            }
        }

        /**
         * Updates the active TOC heading by highlighting the TOC item that corresponds to the given id.
         *
         * @param {string} id - The identifier of the heading to set as active.
         */
        private updateActiveHeading(id: string): void {
            this.activeId = id;

            const tocItems = document.querySelectorAll('.toc-item');

            tocItems.forEach((item) => {
                const link = safeQuerySelector<HTMLAnchorElement>(`a[href="#${id}"]`, item);
                const isActive = link !== null;

                item.classList.toggle('is-active', isActive);

                if (isActive) {
                    this.scrollActiveItemIntoView(item);
                }
            });

            this.renderProgressBars();
            this.updateAriaLabels();
        }

        /**
         * Scrolls the active item into view within the TOC. This ensures that the active item is visible within the
         * viewport by scrolling smoothly to the center of the viewport if necessary. It checks and handles the
         * visibility of the item relative to the TOC container.
         *
         * @param {Element} item The DOM element representing the active item that needs to be scrolled into view.
         */
        private scrollActiveItemIntoView(item: Element): void {
            if (this.elements.nav && this.elements.tocList) {
                try {
                    const tocRect = this.elements.tocList.getBoundingClientRect();
                    const itemRect = item.getBoundingClientRect();
                    const visibleTop = Math.max(tocRect.top, window.innerHeight * TOC.VIEWPORT_MARGINS.TOP + 100);
                    const visibleBottom = Math.min(tocRect.bottom, window.innerHeight * TOC.VIEWPORT_MARGINS.BOTTOM);

                    if (itemRect.top < visibleTop || itemRect.bottom > visibleBottom) {
                        item.scrollIntoView({
                            behavior: 'smooth',
                            block: 'center'
                        });
                    }
                } catch (error) {
                    logger.error('Failed to calculate scroll position', error);
                }
            } else {
                logger.error('Required TOC elements not found for scrolling');
            }
        }

        /**
         * Updates the ARIA labels for the table of contents links. This method traverses all anchor elements with the
         * class 'toc-item' and sets their 'aria-current' attribute based on whether their 'href' matches the currently
         * active ID.
         */
        private updateAriaLabels(): void {
            const links = document.querySelectorAll('.toc-item a');

            links.forEach((link) => {
                link.setAttribute('aria-current', link.getAttribute('href') === `#${this.activeId}` ? 'true' : 'false');
            });
        }

        /**
         * Computes the styles for a progress bar based on the heading's depth and its index.
         *
         * @param heading - An entry in the table of contents whose depth determines the width of the progress bar.
         * @param index - The position of the heading within the table of contents, used to calculate the top position
         *   of the progress bar.
         * @returns An object containing the calculated width, height, and top style properties for the progress bar.
         */
        private getProgressBarStyles(heading: ITOCEntry, index: number): IProgressBarStyles {
            return {
                width: (5 - heading.depth) * TOC.PROGRESS_BAR_BASE_WIDTH,
                height: TOC.PROGRESS_BAR_HEIGHT,
                top: index * (TOC.PROGRESS_BAR_HEIGHT + TOC.PROGRESS_BAR_SPACING)
            };
        }

        /**
         * Renders progress bars for headings based on the screen width. If the screen width is above a certain
         * threshold, the progress bars are cleared. Otherwise, progress bars are rendered dynamically based on the
         * headings.
         */
        private renderProgressBars(): void {
            safeExecute(
                (): void => {
                    if (window.innerWidth >= TOC.WIDE_SCREEN_WIDTH) {
                        // If the screen is wide enough, we don't need the progress bars.
                        // Clear the progress bars container.
                        if (this.elements.progressBars) {
                            this.elements.progressBars.textContent = '';
                        }

                        return;
                    }

                    if (this.elements.progressBars) {
                        const headings = headingStore.get();

                        if (headings.length > 0) {
                            const totalSpacing = (headings.length - 1) * TOC.PROGRESS_BAR_SPACING;
                            const totalBarsHeight = headings.length * TOC.PROGRESS_BAR_HEIGHT;
                            const containerHeight = totalBarsHeight + totalSpacing;

                            this.elements.progressBars.innerHTML = headings
                                .map((heading, index) => {
                                    const styles = this.getProgressBarStyles(heading, index);
                                    return `<div data-heading-id="${heading.id}" class="progress-bar absolute right-0 ${heading.id === this.activeId ? 'bg-toc-progress-active' : 'bg-toc-progress'}" style='width: ${styles.width}px; height: ${styles.height}px; top: ${styles.top}px;'></div>`;
                                })
                                .join('');

                            this.elements.progressBars.style.height = `${containerHeight}px`;
                            this.elements.progressBars.style.top = '50%';
                            this.elements.progressBars.style.transform = 'translateY(-50%)';

                            // logger.info(`Rendered ${headings.length} progress bars`);
                        } else {
                            logger.warn('No headings available for progress bars');
                        }
                    } else {
                        logger.error('Progress bars container not found');
                    }
                },
                undefined,
                'Failed to render progress bars'
            );
        }

        /**
         * Handles mouse move events to show or hide the navigation based on the mouse's position. Only active on
         * screens narrower than a defined width.
         *
         * @param {MouseEvent} event - The mouse event triggered by user movement.
         */
        private mouseMoveRefresh(event: MouseEvent): void {
            if (this.elements.nav && window.innerWidth < TOC.WIDE_SCREEN_WIDTH) {
                const mouseX = event.clientX;
                const windowWidth = window.innerWidth;
                const thresholdShow = windowWidth - TOC.MOUSE_THRESHOLD_INACTIVE;
                const thresholdHide = windowWidth - TOC.MOUSE_THRESHOLD_ACTIVE;

                if (!this.state.isVisible && mouseX > thresholdShow) {
                    this.state.isVisible = true;
                    this.elements.nav.style.pointerEvents = 'auto';
                    this.elements.nav.style.opacity = '1';
                } else if (this.state.isVisible && mouseX < thresholdHide) {
                    this.state.isVisible = false;
                    this.elements.nav.style.pointerEvents = 'none';
                    this.elements.nav.style.opacity = '0';
                }
            }
        }

        /** ID of the request animation frame. */
        private rafId: number | null = null;

        /** Handles scroll events. */
        private scrollRefresh(): void {
            if (!this.rafId) {
                this.state.isScrolling = true;

                this.rafId = requestAnimationFrame(() => {
                    safeExecute(
                        () => {
                            const headings = headingStore.get();
                            const scrollPosition = window.scrollY + window.innerHeight * TOC.VIEWPORT_MARGINS.TOP;
                            const currentPosition = Math.abs(scrollPosition - this.state.lastScrollPosition);

                            if (currentPosition > TOC.SCROLL_THRESHOLD) {
                                this.state.lastScrollPosition = scrollPosition;

                                for (let i = headings.length - 1; i >= 0; i--) {
                                    const element = document.getElementById(headings[i].id);

                                    if (element && element.offsetTop <= scrollPosition) {
                                        this.updateActiveHeading(headings[i].id);
                                        break;
                                    }
                                }
                            }

                            this.updateAriaLabels();
                            this.updateTOCPosition();

                            this.state.isScrolling = false;
                            this.rafId = null;
                        },
                        undefined,
                        'Failed to handle scroll event'
                    );
                });
            }
        }

        /**
         * Renders the TOC by filtering headings based on the provided filter text.
         *
         * @param {string} filter - The text used to filter the headings. The default value is an empty string.
         */
        private renderTOC(filter: string = ''): void {
            safeExecute(
                () => {
                    if (this.elements.tocList) {
                        const headings = headingStore
                            .get()
                            .filter((heading) => heading.text.toLowerCase().includes(filter));

                        this.elements.tocList.innerHTML = headings
                            .map(
                                (heading) =>
                                    `<li class="toc-item ${heading.id === this.activeId ? 'is-active' : ''}" role="listitem"><a class="toc-depth-${heading.depth - 1}" href="#${heading.id}" aria-current="${heading.id === this.activeId ? 'true' : 'false'}">${heading.text}</a></li>`
                            )
                            .join('');
                    }
                },
                undefined,
                'Failed to render TOC'
            );
        }

        /** Cleans up various resources and event listeners associated with the TOC manager. */
        public cleanup(): void {
            safeExecute(
                () => {
                    if (this.rafId) {
                        cancelAnimationFrame(this.rafId);
                        this.rafId = null;
                    }

                    clearInterval(this.intervalId);

                    window.removeEventListener('scroll', this.scrollRefresh);
                    window.removeEventListener('mousemove', this.mouseMoveRefresh);

                    document.querySelectorAll('h1, h2, h3, h4, h5, h6').forEach((heading) => {
                        this.observer.unobserve(heading);
                    });

                    this.elements.tocList?.removeEventListener('click', this.linkClick);

                    logger.info('TOC manager cleaned up successfully');
                },
                undefined,
                'Failed to cleanup TOC manager'
            );
        }

        /**
         * Initializes the table of content (TOC) manager by setting up observation on header elements, updating the TOC
         * mode, visibility, and rendering the TOC. Additionally, activates the first visible heading and logs the
         * initialization status.
         */
        public initialize(): void {
            safeExecute(
                () => {
                    document.querySelectorAll('h1, h2, h3, h4, h5, h6').forEach((heading) => {
                        this.observer.unobserve(heading);
                    });

                    headingStore.get().forEach((heading) => {
                        const element = document.getElementById(heading.id);
                        if (element) {
                            this.observer.observe(element);
                        }
                    });

                    this.updateTOCMode();
                    this.updateProgressVisibility();
                    this.renderTOC();
                    this.renderProgressBars();

                    logger.info('TOC manager initialized successfully');
                },
                undefined,
                'Failed to initialize TOC manager'
            );
        }

        /**
         * Event handler for TOC link clicks.
         *
         * Intercepts clicks on links contained within table of contents items, prevents the default link behavior, and
         * performs a smooth scroll to the target element identified by the link's href attribute. Additionally, it
         * updates the URL hash using the History API. If the target identifier is invalid or missing, an error is
         * logged.
         *
         * @param {MouseEvent} event - The mouse event triggered by clicking a TOC link.
         */
        private linkClick(event: MouseEvent): void {
            const link = event.target as HTMLAnchorElement;

            if (link.matches('.toc-item a')) {
                event.preventDefault();
                const targetId = link.getAttribute('href')?.substring(1);

                if (targetId) {
                    smoothScrollTo({ targetId: targetId });

                    try {
                        history.pushState(null, '', `#${targetId}`);
                    } catch (error) {
                        logger.error('Failed to update URL hash', error);
                    }
                } else {
                    logger.error('Invalid or missing target ID in TOC link');
                }
            } else {
                logger.warn('Click event on non-TOC link element');
            }
        }

        /**
         * Updates the visibility of the progress element based on the window's width. The progress element is
         * identified by the ID 'toc-progress'. It will be hidden if the window's width is greater than or equal to the
         * predetermined wide screen width defined by `TOC.WIDE_SCREEN_WIDTH`. Otherwise, it will be shown.
         */
        private updateProgressVisibility(): void {
            const progressElement = document.getElementById('toc-progress');
            const isWideScreen = window.innerWidth >= TOC.WIDE_SCREEN_WIDTH;

            if (progressElement) {
                progressElement.style.display = isWideScreen ? 'none' : 'block';

                if (!isWideScreen) {
                    this.renderProgressBars();
                }
            }
        }
    }

    safeExecute(
        () => {
            const manager = new TOCManager();
            manager.initialize();

            document.addEventListener('astro:page-load', manager.initialize);
            document.addEventListener('astro:before-preparation', manager.cleanup);
        },
        undefined,
        'Failed to setup TOC manager'
    );
</script>
